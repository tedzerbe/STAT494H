las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance")
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 3)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 1)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2) +
coord_flip()
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(7, 5, 4, 2) + 0.1)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(7, 5, 4, 2) + 0.15)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(7, 6, 4, 2) + 0.1)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(7, 7, 4, 2) + 0.1)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(7, 10, 4, 2) + 0.1)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(7, 6, 10, 2) + 0.1)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(7, 6, 4, 10) + 0.1)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(10, 6, 4, 2) + 0.1)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(7, 6, 4, 2) + 0.2)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
par(mar = c(7, 6, 4, 2) + 0.5)
barplot(variable_averages_df$Importance,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
ylab = "Importance",
las = 2)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(desc(Importance))
barplot(variable_averages_df$Importance,
horiz = TRUE,
names.arg = variable_averages_df$Variable,
col = "skyblue",
main = "Variable Importance",
xlab = "Importance",
ylab = "Variable Names",
las = 1)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
par(mar = c(5, 8, 4, 2) + 0.1)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "skyblue",
main = "Variable Importance",
xlab = "Importance",
ylab = "Variable Names",
las = 1)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
par(mar = c(5, 8, 4, 2) + 0.1)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "skyblue",
main = "Variable Importance",
xlab = "Importance",
las = 1)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
variable_averages_df <- variable_averages_df[order(variable_averages_df$Importance, decreasing = TRUE), ]
par(mar = c(5, 8, 4, 2) + 0.1)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "skyblue",
main = "Variable Importance",
xlab = "Importance",
las = 1)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
variable_averages_df <- variable_averages_df[order(variable_averages_df$Importance, decreasing = TRUE), ]
par(mar = c(7, 10, 4, 2) + 0.1)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "skyblue",
main = "Variable Importance",
xlab = "Importance",
las = 1)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
variable_averages_df <- variable_averages_df[order(variable_averages_df$Importance, decreasing = TRUE), ]
par(mar = c(7, 10, 4, 2) + 0.1)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
# Front Matter ---------------------------------------------------------------------
library(tidyverse)
library(tidymodels)
# Load data
data <- read.csv("project/volume/data/processed/final.csv")
# Function to compute weighted mean squared error
weighted_mse_impl <- function(truth, estimate, case_weights = NULL) {
if (is.null(case_weights)) {
mean((truth - estimate) ^ 2)
} else {
# Ensure weights are normalized
case_weights <- case_weights / sum(case_weights)
sum((truth - estimate) ^ 2 * case_weights)
}
}
# Vectorized function to compute weighted RMSE, handling NA values and using case weights
weighted_rmse_vec <- function(truth, estimate, na_rm = TRUE, case_weights = NULL, ...) {
check_numeric_metric(truth, estimate, case_weights)
if (na_rm) {
result <- yardstick_remove_missing(truth, estimate, case_weights)
truth <- result$truth
estimate <- result$estimate
case_weights <- result$case_weights
} else if (yardstick_any_missing(truth, estimate, case_weights)) {
return(NA_real_)
}
# Compute the square root of the weighted MSE
sqrt(weighted_mse_impl(truth, estimate, case_weights = case_weights))
}
# S3 generic function for RMSE
weighted_rmse <- function(data, ...) {
UseMethod("weighted_rmse")
}
# Create a new numeric metric for weighted RMSE
weighted_rmse <- new_numeric_metric(weighted_rmse, direction = "minimize")
# Method to calculate weighted RMSE for data.frame input
weighted_rmse.data.frame <- function(data, truth, estimate, na_rm = TRUE, case_weights = NULL, ...) {
numeric_metric_summarizer(
name = "weighted_rmse",
fn = weighted_rmse_vec,
data = data,
truth = !!enquo(truth),
estimate = !!enquo(estimate),
na_rm = na_rm,
case_weights = !!enquo(case_weights)
)
}
num_seeds <- 100
# Null Model ---------------------------------------------------------------------
test_errors <- data.frame()
for (i in 1:num_seeds) {
set.seed(i)
# Split the data with random seed
data_split <- initial_split(data, prop = 0.8)
train <- training(data_split)
test <- testing(data_split)
folds <- vfold_cv(train, v = 10)
null_pred <- 100
test_preds <- test %>%
mutate(.pred = null_pred) %>%
select(PlayerID, Name, Season_future, Start_IP_future, ERA_Minus_future, .pred, Start_IP_past1)
# Calculate test error
test_error <- weighted_rmse.data.frame(
data = test_preds,
truth = ERA_Minus_future,
estimate = .pred,
na_rm = TRUE,
case_weights = Start_IP_future
)
# Save testing error
test_errors <- rbind(test_errors, test_error)
}
# Save testing errors and variable importances
write.csv(test_errors, "project/volume/models/null_errors.csv")
# Naive Model ---------------------------------------------------------------------
test_errors <- data.frame()
for (i in 1:num_seeds) {
set.seed(i)
# Split the data with random seed
data_split <- initial_split(data, prop = 0.8)
train <- training(data_split)
test <- testing(data_split)
folds <- vfold_cv(train, v = 10)
test_preds <- test %>%
mutate(.pred = ifelse(is.na(xFIP_Minus_past1) | Start_IP_past1 < 60, null_pred, xFIP_Minus_past1)) %>%
select(PlayerID, Name, Season_future, Start_IP_future, ERA_Minus_future, .pred, Start_IP_past1)
# Calculate test error
test_error <- weighted_rmse.data.frame(
data = test_preds,
truth = ERA_Minus_future,
estimate = .pred,
na_rm = TRUE,
case_weights = Start_IP_future
)
# Save testing error
test_errors <- rbind(test_errors, test_error)
}
# Save testing errors and variable importances
write.csv(test_errors, "project/volume/models/naive_errors.csv")
View(test_errors)
error_rates <- c(with_error, without_error, null_error, naive_error)
# Define labels for the bars
labels <- c("With Error", "Without Error", "Naive Error", "Null Error")
# Create a bar plot
barplot(error_rates, names.arg = labels, col = "royalblue3", main = "Average Testing Error Rates", ylab = "Error Rate", xlab = "Error Type")
# Set working directory
wd <- "C:/Users/malco/Documents/GitHub/STAT494H/" # Change as needed
# Load libraries
library(tidyverse)
# Load results
model_with_errors <- read.csv(paste0(wd, "project/volume/models/model_with_errors.csv"))
model_without_errors <- read.csv(paste0(wd, "project/volume/models/model_without_errors.csv"))
null_errors <- read.csv(paste0(wd, "project/volume/models/null_errors.csv"))
naive_errors <- read.csv(paste0(wd, "project/volume/models/naive_errors.csv"))
model_with_vips <- read.csv(paste0(wd, "project/volume/plots/model_with_vips.csv"))
model_without_vips <- read.csv(paste0(wd, "project/volume/plots/model_without_vips.csv"))
# Calculate average testing error for both models
with_error <- mean(model_with_errors$.estimate)
without_error <- mean(model_without_errors$.estimate)
null_error <- mean(null_errors$.estimate)
naive_error <- mean(naive_errors$.estimate)
error_rates <- c(with_error, without_error, null_error, naive_error)
# Define labels for the bars
labels <- c("With Error", "Without Error", "Naive Error", "Null Error")
# Create a bar plot
barplot(error_rates, names.arg = labels, col = "royalblue3", main = "Average Testing Error Rates", ylab = "Error Rate", xlab = "Error Type")
# Split the data with random seed
data_split <- initial_split(data, prop = 0.8)
train <- training(data_split)
test <- testing(data_split)
folds <- vfold_cv(train, v = 10)
test_preds <- test %>%
mutate(.pred = ifelse(is.na(xFIP_Minus_past1) | Start_IP_past1 < 60, null_pred, xFIP_Minus_past1)) %>%
select(PlayerID, Name, Season_future, Start_IP_future, ERA_Minus_future, .pred, Start_IP_past1)
# Calculate test error
test_error <- weighted_rmse.data.frame(
data = test_preds,
truth = ERA_Minus_future,
estimate = .pred,
na_rm = TRUE,
case_weights = Start_IP_future
)
View(test_error)
test_preds <- test %>%
mutate(.pred = ifelse(is.na(xFIP_Minus_past1) | Start_IP_past1 < 60, null_pred, xFIP_Minus_past1)) %>%
select(PlayerID, Name, Season_future, Start_IP_future, ERA_Minus_future, .pred, Start_IP_past1)
# Calculate test error
test_error <- weighted_rmse.data.frame(
data = test_preds,
truth = ERA_Minus_future,
estimate = .pred,
na_rm = TRUE,
case_weights = Start_IP_future
)
View(test_errors)
# Save testing error
test_errors <- rbind(test_errors, test_error)
View(test_errors)
View(test_preds)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
variable_averages_df <- variable_averages_df[order(variable_averages_df$Importance, decreasing = TRUE), ]
par(mar = c(7, 10, 4, 2) + 0.1)
vip <- barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
vip
ggsave(file_name = paste0(wd, "project/volume/plots/vip.png"), plot = vip, width = 10, height = 8, dpi = 300)
paste0(wd, "project/volume/plots/vip.png")
ggsave(filename = paste0(wd, "project/volume/plots/vip.png"), plot = vip, width = 10, height = 8, dpi = 300)
vip
vip[1]
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
variable_averages_df <- variable_averages_df[order(variable_averages_df$Importance, decreasing = TRUE), ]
par(mar = c(7, 10, 4, 2) + 0.1)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
png("variable_importance_plot.png", width = 800, height = 600)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
variable_averages_df <- variable_averages_df[order(variable_averages_df$Importance, decreasing = TRUE), ]
par(mar = c(7, 10, 4, 2) + 0.1)
png("variable_importance_plot.png", width = 800, height = 600)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
dev.off()
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
png("variable_importance_plot.png", width = 800, height = 600)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
dev.off()
png("variable_importance_plot.png", width = 1000, height = 600)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
dev.off()
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
variable_averages_df <- variable_averages_df[order(variable_averages_df$Importance, decreasing = TRUE), ]
par(mar = c(7, 10, 4, 2) + 0.1)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
variable_averages <- colMeans(model_with_vips)
variable_averages_df <- data.frame(Variable = names(model_with_vips), Importance = column_averages) %>%
filter(Variable != "X") %>%
arrange(Importance)
variable_averages_df <- variable_averages_df[order(variable_averages_df$Importance, decreasing = TRUE), ]
par(mar = c(7, 10, 4, 2) + 0.1)
barplot(rev(variable_averages_df$Importance),
horiz = TRUE,
names.arg = rev(variable_averages_df$Variable),
col = "royalblue3",
main = "Variable Importance",
xlab = "Importance",
las = 1)
